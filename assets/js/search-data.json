{
  
    
  
    
        "post1": {
            "title": "Why I Like PyCharm, Especially its Pro Edition",
            "content": "https://www.jetbrains.com/pycharm/ . I‚Äôve been using PyCharm for 5 years til now, including 2 years of time with its Professional Edition (the rest 3 years were depressing). Here is a summary on how it‚Äôs setup for my daily Python development tasks. . Overall Workflow . Philosophy . Use local computer as a terminal to the cloud, and do only light-weighted tasks, e.g. managing files or source code, browsing documentation and search the Internet (more precisely, StackOverflow), etc. . | Leave heavy-lifting tasks to disposable remote machine(s) on either on-promise or public cloud, i.e. Program compiling, running and execution, e.g. GPU/TPU for Deep Learning tasks. | Network traffic, e.g. docker Pushing/Pulling, big dataset version control and its Uploading/Downloading. | Dataset management, e.g. PySpark job, SQL ETL, etc | . In short, don‚Äôt do any of this things on your local machine, regardless how powerful you think your computer is, how fast you assume your Broadband is, or how cheap you estimate your electricity bill is. . | Leverage Git repository, e.g. GitHub, to version control source code. | Use Container Registry, e.g. Docker Hub, to manage your environment dependencies. | . Setup . Following these philosophies, a typical end-to-end setup would look like this[^1]: . . More details will be covered below, but on a high level the workflow looks like: . Step 1. git pull source code from Git repo to local machine. | Step 2.1. Boot up remote resources, e.g. compute instance with GPU enabled, and use remote Python Interpreter with PyCharm Remote. | Step 2.2. Set up file Sync with PyCharm Deployment including .git/, which automatically Sync local files to the remote directory. | Step 3. Start Jupyter Notebook server on the remote, and setup SSH tunnel to the local, so you can do interactive coding Experiments in your local browser. | Step 4.1 Modularise code from Jupyter and organise it into Python package with help from an Integrated Development Environment (IDE) like PyCharm, including Reformatting, e.g. Black. | PyLint. | Docstring, e.g. Numpy style. | Unit testing, e.g. PyTest. | Dependency requirements, e.g. pipreqs . in root folder. | Command Line Interface (CLI), e.g. setup.py entry point. | Documentation, Sphinx + Jupyter Notebook | Install the Python package at remote, e.g. pip install -e . | . | Step 4.2 Write Dockerfile (local), build Docker Images (remote) and push it (at remote) to Container Registry, e.g. Docker Hub. | Step 5 Run Docker container on Remote, and test the functionalities are achieved per design. | Step 6 git push source code back to Git repo for back-up and peace-of-mind. | Step 7 Setup CI/CD pipeline to automatically run unit testing, compile documentation, update docker images, etc. | . This post will focus on Step 2, 3 and 4 setting ups with PyCharm Pro. . [^1]In case you wonder how the above graph is generated in Markdown with Jekyll: . @startmermaid sequenceDiagram üóí Git RepositoryÔ∏è-&gt;&gt;üíª Local: (1) Version Control üíª Local-&gt;&gt;üóí Git RepositoryÔ∏è: (6) Version Control üíª Local-&gt;&gt;‚òÅÔ∏è Remote: (2) Source Code Sync ‚òÅÔ∏è Remote-&gt;&gt;üíª Local: (3) Jupyter Notebook Note right of üíª Local: SFTP/SSH Tunnel ‚òÅÔ∏è Remote-&gt;&gt;üê≥ Docker Registry: (4) Push üê≥ Docker Registry-&gt;&gt;‚òÅÔ∏è Remote: (5) Deployment üóí Git RepositoryÔ∏è-&gt;&gt;üê≥ Docker Registry: (7) CI/CD @endmermaid . To get mermaid rendered in Jekyll, you need to configure its plugin jekyll-spaceship. . Python Modularisation . For every project, what you are doing end of the day shall be developing a software (in our case Python) module, to be hand over and re-used by yourself, your colleague, your client, your community or your market, perhaps in form of a delivery product that‚Äôs running online. If this is not the case, think twice about what the outcoming artifact is by end of your time, and why you are adding value with that time and resources spend. . The gap between a Python newbie versus a professional developer, most of the time can be superficially overcome via the following 3 steps. . From Python Scripts to Python Package . Everything is covered in this 3min less step-by-step answer. Just read and follow. . Command Line Interface (CLI) . If you are sick of python script.py or chmod +x script.py &amp;&amp; ./script.py, all you need are the following 3 resources: . Python Entry Points Explained | Google Fire | Text to ASCII art Generator | Project Template . After manually adding files several times, including: . README.MD | requirements.txt | setup.py | Dockerfile | .gitignore | License | ‚Ä¶ | . You‚Äôll realise you need something like Pyscaffold. . Remote Kernel and File Synchronisation . Everything in this world is an Optimisation problem, consisting of: . Objective(s) | Constrain(s) or requirement(s) | Algorithm, strategy or tools, that return an acceptable solution within reasonable amount of time. | Yes, setting-up optmisation is an optimisation problem itself, too. . Now we shall be clear that (a) our objective is to develop professional Python module, and (b) our requirement is to fullfill the setting up philosophy that do no heavy-lifting at local but only cloud. . Let‚Äôs see how the tool Pycharm Pro can help us to do this. At this stage, you shall get access to a remote compute machine with credentials, and setup a Python environment there, e.g. with Miniconda. . If you wonder how to get a remote computer at free cost, consider the following options: . Whether your organisation or institute have a High Performance Computing (HPC) cluster, and see if you can request a node. This normally apply to national education or research institute, e.g. Universities. | Whether your company have on-promise data center. | Whether your team do daily DevOps on public cloud. | Public cloud free tier, though this option won‚Äôt give you compute instance type more mighty than your local one. | Public cloud Credits. | Public cloud Funding Program for Startups, Academic Research Projects, e.g. AWS Cloud Credits for Research. | Remote Kernel . There are different ways to choose a Python interpreter in PyCharm Pro, one of which is SSH interpreter, as shown in the image below. Here, you can type in the Host, Port and Username. . . After which you can input credentials information, e.g. Authentication type, Private key file and its Passphrase if applicable. . You shall explore Docker and Docker Compose as well. . . Finally, we can specify the Python Interpreter path on the remote instance, and also map the current project root to a directory on the remote. Check the box Automatically upload project files to the server. . . Source Code File Deployment . Now we can setup the deployment options. Below is my personal preference. Key points are: . Remove .git/ from the Exclude items by name. This may be controversial but is vital for our setup: . When you install your package with pip install -e . on the remote, some package has hard requirements to have .git present in the root folder otherwise it won‚Äôt install. | You do normal git operations only on local, and they will be automatically reflected on the remote. This saves you from doing git push at local followed by git pull on remote 24/7, even if your code is not ready for commit at all. | . | Check Create empty directory. If you ever worked with Flask server you‚Äôd know what I‚Äôve experienced. | Check Delete target items when source ones do not exist. | Upload changed files automatically to the default server: Always | . In short, we maintain one source-of-the-truth at local, and have the remote be an exact mirror copy of that. . . Under Tools, select Start SSH session, then you will open an Terminal to your remote server. Now it‚Äôs time to switch on Tmux and run pip install -e . in your Python package root directory at remote, and we‚Äôve completed Step 2. . Jupyter Server: SSH Tunnel Port Forwarding . . In the same Terminal to the remote, maybe within Tmux, start Jupyter server on the remote, e.g. jupyter notebook --no-browser. You will be returned with Jupyter server url, port number, and maybe its token. However, all of these information right now is relative to the remote instance only ‚Äì you won‚Äôt be able to reach them from local. . Unlike life, in Python most of the time had already been solved by others for us. The solution to the above problem are given: . Remote Access to IPython Notebooks via SSH | Connect to Jupyter Notebook Running on EC2 Instance | In short, at Terminal to the local, do . ssh -i &lt;path-to-private-key&gt;.pem -N -f -L localhost:&lt;local-port-you-prefer-e.g.-8888&gt;:localhost:&lt;remote-port-shown-on-previous-terminal&gt; &lt;remote-user-name-e.g.-ubuntu&gt;@&lt;remote-hostname-e.g.-57.249.126.45&gt; . Now you shall use your local browser and go to http://localhost:&lt;local-port-you-just-specified&gt;. If you can create a new Jupyter notebook, select your Python kernel, and run successfully import &lt;you-python-module-name&gt;, then we‚Äôve completed Step 3. . What you can do now typically is, git checkout to a feature branch at local, experiment with different code in notebooks with local browser, and keeps modularising those code into your source code sit in PyCharm Pro and get them into good shape using best practises, as described in Step 4.1. Finally, do git push to the code repository periodically. . However, be aware that all the heavy code executions, data management, network traffics occur at the remote, but reflected in your local browser in notebooks, which can be downloaded as HTML or organised into documentation with Sphinx. . Docker BUILD and PUSH . Summary . Nothing is perfect in this world, but I‚Äôd like to focus on their strength. . Auto Fix | Auto Completion: Accurate &amp; Fast | Navigation Smooth | Templates of Frameworks | . Next . VSCode Pro . Extension | Remote Dev | Short-cut, get rid of TouchPad/Mouse. | Light Weight | Vs Atom, Sublime, Vim, NotePad++, TextWrangler (now BBEdit). | .",
            "url": "https://sunbc0120.github.io/blog/markdown/python/boilerplate/2020/09/20/pycharm.html",
            "relUrl": "/markdown/python/boilerplate/2020/09/20/pycharm.html",
            "date": " ‚Ä¢ Sep 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "How To Be More Impressive",
            "content": "Practise Markdown Math typing and formatting by reproducing: . How to be more impressive? What a lot of current Neuroscience papers feel like. pic.twitter.com/9QR9DLDFwp . &mdash; Aleksandar Ivanov (@phant0msp1k3) June 11, 2020 Suppose we want to publish something that is as simple as . To have numbered equation, type: . $$1+1=2 tag{1}$$ . Pay attention to the tag{1}. Unlike LaTex, you have to manage numbering and reference yourself in Markdown. . $$1+1=2 tag{1}$$ . This is not very impressive. If we want our article to be accepted by IEEE reviewers, we have to be more abstract. So, we could complicate the left hand side of the expression by using . To have text in between equations in the same line, type: . $$ ln(e) = 1 text{ and } sin^2x + cos^2 x = 1$$ . Pay attention to the space before and after the and in the {}. . $$ ln(e) = 1 text{ and } sin^2x + cos^2 x = 1$$ . and the right hand side can be stated as . This one is similar to LaTex, type: . $$2= sum_{n=1}^ infty frac{1}{2^n}$$ . $$2= sum_{n=1}^ infty frac{1}{2^n}$$ . Therefore, Equation (1) can be expressed more scientificially as: . Type . $$ ln(e) + ( sin^2x + cos^2 x) = sum_{n=1}^ infty frac{1}{2^n} tag{2}$$ . Pay attention to the tag{2}. . $$ ln(e) + ( sin^2x + cos^2 x) = sum_{n=1}^ infty frac{1}{2^n} tag{2}$$ . which is far more impressive. However, we should not stop here. The expression can be further complicated by using . Type . $$e = lim_{z rightarrow infty}(1+ frac{1}{z})^z text{ and } 1= cosh(y) sqrt{1- tanh^2y}$$ . Pay attention to the space before and after and, again. . $$e = lim_{z rightarrow infty}(1+ frac{1}{z})^z text{ and } 1= cosh(y) sqrt{1- tanh^2y}$$ . Equation (2) may therefore be written as . This equation is ‚Äúimpressive‚Äù, . $$ ln left[ lim_{z rightarrow infty}(1+ frac{1}{z})^z right] + left( sin^2x + cos^2 x right) = sum_{n=1}^ infty frac{ cosh(y) sqrt{1- tanh^2y}}{2^n} tag{3}$$ . Pay attention to the first pair of brackets []: it comes with left[ and right]. Without left and right, the bracket will be smaller or shorter, which won‚Äôt contain the full height of $ lim_{z rightarrow infty}(1+ frac{1}{z})^z$. . $$ ln left[ lim_{z rightarrow infty}(1+ frac{1}{z})^z right] + left( sin^2x + cos^2 x right) = sum_{n=1}^ infty frac{ cosh(y) sqrt{1- tanh^2y}}{2^n} tag{3}$$ . Note: Other methods of a similar nature could also be used to enhance our prestige, once we grasp the underlying pringciples. .",
            "url": "https://sunbc0120.github.io/blog/markdown/2020/09/17/impressive.html",
            "relUrl": "/markdown/2020/09/17/impressive.html",
            "date": " ‚Ä¢ Sep 17, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.‚Ü© . 2. This is the other footnote. You can even have a link!‚Ü© .",
            "url": "https://sunbc0120.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " ‚Ä¢ Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a ‚Äúlevel 1 heading‚Äù in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here‚Äôs a footnote 1. Here‚Äôs a horizontal rule: . . Lists . Here‚Äôs a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes ‚Ä¶and‚Ä¶ . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote.¬†&#8617; . |",
            "url": "https://sunbc0120.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " ‚Ä¢ Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats.¬†&#8617; . |",
          "url": "https://sunbc0120.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://sunbc0120.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}